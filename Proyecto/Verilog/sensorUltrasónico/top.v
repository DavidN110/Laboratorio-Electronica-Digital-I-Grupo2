/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module \f.alc  (
  output [15:0] s
);
  assign s = 16'b1010101111001101;
endmodule

module ctr (
  output [3:0] ctr
);
  assign ctr = 4'b1110;
endmodule

module DIG_Counter_Nbit
#(
    parameter Bits = 2
)
(
    output [(Bits-1):0] out,
    output ovf,
    input C,
    input en,
    input clr
);
    reg [(Bits-1):0] count;

    always @ (posedge C) begin
        if (clr)
          count <= 'h0;
        else if (en)
          count <= count + 1'b1;
    end

    assign out = count;
    assign ovf = en? &count : 1'b0;

    initial begin
        count = 'h0;
    end
endmodule


module cntr (
  input c,
  input cl,
  output [19:0] cn
);
  wire s0;
  assign s0 = ~ c;
  DIG_Counter_Nbit #(
    .Bits(20)
  )
  DIG_Counter_Nbit_i0 (
    .en( c ),
    .C( cl ),
    .clr( s0 ),
    .out( cn )
  );
endmodule

module relojC (
  input cl,
  output [19:0] cn
);
  wire const1b1;
  wire s0;
  assign const1b1 = 1'b1;
  assign s0 = ~ const1b1;
  DIG_Counter_Nbit #(
    .Bits(20)
  )
  DIG_Counter_Nbit_i0 (
    .en( const1b1 ),
    .C( cl ),
    .clr( s0 ),
    .out( cn )
  );
endmodule
module DIG_D_FF_1bit
#(
    parameter Default = 0
)
(
   input D,
   input C,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module divFl (
  input cl,
  output dvcl
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire s17;
  wire s18;
  wire s19;
  wire s20;
  wire s21;
  wire s22;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i0 (
    .D( s0 ),
    .C( cl ),
    .Q( s1 ),
    .\~Q ( s0 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i1 (
    .D( s2 ),
    .C( s1 ),
    .Q( s3 ),
    .\~Q ( s2 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i2 (
    .D( s4 ),
    .C( s3 ),
    .Q( s5 ),
    .\~Q ( s4 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i3 (
    .D( s6 ),
    .C( s5 ),
    .Q( s7 ),
    .\~Q ( s6 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i4 (
    .D( s8 ),
    .C( s7 ),
    .Q( s9 ),
    .\~Q ( s8 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i5 (
    .D( s10 ),
    .C( s9 ),
    .Q( s11 ),
    .\~Q ( s10 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i6 (
    .D( s12 ),
    .C( s11 ),
    .Q( s13 ),
    .\~Q ( s12 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i7 (
    .D( s14 ),
    .C( s13 ),
    .Q( s15 ),
    .\~Q ( s14 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i8 (
    .D( s16 ),
    .C( s15 ),
    .Q( s17 ),
    .\~Q ( s16 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i9 (
    .D( s18 ),
    .C( s17 ),
    .Q( s19 ),
    .\~Q ( s18 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i10 (
    .D( s20 ),
    .C( s19 ),
    .Q( s21 ),
    .\~Q ( s20 )
  );
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i11 (
    .D( s22 ),
    .C( s21 ),
    .Q( dvcl ),
    .\~Q ( s22 )
  );
endmodule

module DIG_Mul_unsigned #(
    parameter Bits = 1
)
(
    
      input [(Bits-1):0] a,
      input [(Bits-1):0] b,
      output [(Bits*2-1):0] mul
    
);
    assign mul = a * b;
endmodule


module distancia (
  input [19:0] cn,
  output [8:0] l,
  output [3:0] ld
);
  wire [39:0] s0;
  DIG_Mul_unsigned #(
    .Bits(20)
  )
  DIG_Mul_unsigned_i0 (
    .a( 20'b101100111 ),
    .b( cn ),
    .mul( s0 )
  );
  assign l[0] = s0[20];
  assign l[1] = s0[21];
  assign l[2] = s0[22];
  assign l[3] = s0[23];
  assign l[4] = s0[24];
  assign l[5] = s0[25];
  assign l[6] = s0[26];
  assign l[7] = s0[27];
  assign l[8] = s0[28];
  assign ld[0] = s0[16];
  assign ld[1] = s0[17];
  assign ld[2] = s0[18];
  assign ld[3] = s0[19];
endmodule

module CompUnsigned #(
    parameter Bits = 1
)
(
    input [(Bits -1):0] a,
    input [(Bits -1):0] b,
    output \> ,
    output \= ,
    output \<
);
    assign \> = a > b;
    assign \= = a == b;
    assign \< = a < b;
endmodule


module tpulso (
  input [19:0] l,
  output ov
);
  wire s0;
  CompUnsigned #(
    .Bits(20)
  )
  CompUnsigned_i0 (
    .a( l ),
    .b( 20'b100010011 ),
    .\> ( s0 )
  );
  assign ov = ~ s0;
endmodule

module cntr4 (
  input cld,
  output [1:0] s
);
  wire const1b1;
  wire s0;
  assign const1b1 = 1'b1;
  assign s0 = ~ const1b1;
  DIG_Counter_Nbit #(
    .Bits(2)
  )
  DIG_Counter_Nbit_i0 (
    .en( const1b1 ),
    .C( cld ),
    .clr( s0 ),
    .out( s )
  );
endmodule

module sumres (
  input op,
  input a,
  input b,
  input cbi,
  output s,
  output cbo
);
  wire s0;
  assign s0 = ~ a;
  assign s = ((s0 & ~ b & cbi) | (s0 & b & ~ cbi) | (a & ~ b & ~ cbi) | (a & b & cbi));
  assign cbo = ((a & cbi & ~ op) | (a & b & ~ op) | (s0 & cbi & op) | (s0 & b & op) | (b & cbi));
endmodule

module Suma_resta (
  input a_3,
  input a_2,
  input a_1,
  input a_0,
  input b_3,
  input b_2,
  input b_1,
  input b_0,
  input Op,
  output s_4,
  output s_3,
  output s_2,
  output s_1,
  output s_0
);
  wire s0;
  wire s1;
  wire s2;
  sumres sumres_i0 (
    .op( Op ),
    .a( a_0 ),
    .b( b_0 ),
    .cbi( 1'b0 ),
    .s( s_0 ),
    .cbo( s2 )
  );
  sumres sumres_i1 (
    .op( Op ),
    .a( a_1 ),
    .b( b_1 ),
    .cbi( s2 ),
    .s( s_1 ),
    .cbo( s1 )
  );
  sumres sumres_i2 (
    .op( Op ),
    .a( a_2 ),
    .b( b_2 ),
    .cbi( s1 ),
    .s( s_2 ),
    .cbo( s0 )
  );
  sumres sumres_i3 (
    .op( Op ),
    .a( a_3 ),
    .b( b_3 ),
    .cbi( s0 ),
    .s( s_3 ),
    .cbo( s_4 )
  );
endmodule

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module bitsToBcd (
  input [3:0] b,
  output [3:0] d
);
  wire [3:0] s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire [3:0] s8;
  wire s9;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire s14;
  wire s15;
  wire s16;
  wire [3:0] const4b3;
  assign const4b3 = 4'b11;
  assign s3 = b[0];
  assign s4 = b[1];
  assign s5 = b[2];
  assign s6 = b[3];
  assign s12 = const4b3[0];
  assign s11 = const4b3[1];
  assign s10 = const4b3[2];
  assign s9 = const4b3[3];
  assign s0[0] = s3;
  assign s0[1] = s4;
  assign s0[2] = s5;
  assign s0[3] = s6;
  Suma_resta Suma_resta_i0 (
    .a_3( s6 ),
    .a_2( s5 ),
    .a_1( s4 ),
    .a_0( s3 ),
    .b_3( s9 ),
    .b_2( s10 ),
    .b_1( s11 ),
    .b_0( s12 ),
    .Op( 1'b0 ),
    .s_3( s13 ),
    .s_2( s14 ),
    .s_1( s15 ),
    .s_0( s16 )
  );
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i1 (
    .a( 4'b101 ),
    .b( s0 ),
    .\= ( s1 ),
    .\< ( s2 )
  );
  assign s8[0] = s16;
  assign s8[1] = s15;
  assign s8[2] = s14;
  assign s8[3] = s13;
  assign s7 = (s1 | s2);
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i2 (
    .sel( s7 ),
    .in_0( s0 ),
    .in_1( s8 ),
    .out( d )
  );
endmodule

module \9bitsToBcd  (
  input [8:0] l,
  output [3:0] c,
  output [3:0] d,
  output [3:0] u
);
  wire [3:0] s0;
  wire [3:0] s1;
  wire [3:0] s2;
  wire [3:0] s3;
  wire [3:0] s4;
  wire [3:0] s5;
  wire [3:0] s6;
  wire [3:0] s7;
  wire [3:0] s8;
  wire [3:0] s9;
  wire [3:0] s10;
  wire [3:0] s11;
  wire [3:0] s12;
  wire [3:0] s13;
  wire [3:0] s14;
  wire [3:0] s15;
  wire [3:0] s16;
  wire [3:0] s17;
  wire [3:0] s18;
  wire [3:0] s19;
  assign s0[0] = l[6];
  assign s0[1] = l[7];
  assign s0[2] = l[8];
  assign s0[3] = 1'b0;
  bitsToBcd bitsToBcd_i0 (
    .b( s0 ),
    .d( s1 )
  );
  assign s2[0] = l[5];
  assign s2[1] = s1[0];
  assign s2[2] = s1[1];
  assign s2[3] = s1[2];
  bitsToBcd bitsToBcd_i1 (
    .b( s2 ),
    .d( s3 )
  );
  assign s4[0] = l[4];
  assign s4[1] = s3[0];
  assign s4[2] = s3[1];
  assign s4[3] = s3[2];
  assign s12[0] = s3[3];
  assign s12[1] = s1[3];
  assign s12[2] = 1'b0;
  assign s12[3] = 1'b0;
  bitsToBcd bitsToBcd_i2 (
    .b( s4 ),
    .d( s5 )
  );
  bitsToBcd bitsToBcd_i3 (
    .b( s12 ),
    .d( s13 )
  );
  assign s6[0] = l[3];
  assign s6[1] = s5[0];
  assign s6[2] = s5[1];
  assign s6[3] = s5[2];
  assign s14[0] = s5[3];
  assign s14[1] = s13[0];
  assign s14[2] = s13[1];
  assign s14[3] = s13[2];
  bitsToBcd bitsToBcd_i4 (
    .b( s6 ),
    .d( s7 )
  );
  bitsToBcd bitsToBcd_i5 (
    .b( s14 ),
    .d( s15 )
  );
  assign s8[0] = l[2];
  assign s8[1] = s7[0];
  assign s8[2] = s7[1];
  assign s8[3] = s7[2];
  assign s16[0] = s7[3];
  assign s16[1] = s15[0];
  assign s16[2] = s15[1];
  assign s16[3] = s15[2];
  bitsToBcd bitsToBcd_i6 (
    .b( s8 ),
    .d( s9 )
  );
  bitsToBcd bitsToBcd_i7 (
    .b( s16 ),
    .d( s17 )
  );
  assign s10[0] = l[1];
  assign s10[1] = s9[0];
  assign s10[2] = s9[1];
  assign s10[3] = s9[2];
  assign s18[0] = s9[3];
  assign s18[1] = s17[0];
  assign s18[2] = s17[1];
  assign s18[3] = s17[2];
  bitsToBcd bitsToBcd_i8 (
    .b( s10 ),
    .d( s11 )
  );
  bitsToBcd bitsToBcd_i9 (
    .b( s18 ),
    .d( s19 )
  );
  assign u[0] = l[0];
  assign u[1] = s11[0];
  assign u[2] = s11[1];
  assign u[3] = s11[2];
  assign c[0] = s19[3];
  assign c[1] = s17[3];
  assign c[2] = s15[3];
  assign c[3] = s13[3];
  assign d[0] = s11[3];
  assign d[1] = s19[0];
  assign d[2] = s19[1];
  assign d[3] = s19[2];
endmodule

module fraccion (
  input [3:0] b,
  output [3:0] d
);
  wire b_2;
  wire b_3;
  wire b_1;
  wire s0;
  wire s1;
  wire b_0;
  wire s2;
  assign b_0 = b[0];
  assign b_1 = b[1];
  assign b_2 = b[2];
  assign b_3 = b[3];
  assign s0 = ~ b_3;
  assign s1 = ~ b_2;
  assign s2 = ~ b_1;
  assign d[0] = ((b_0 & s2 & s0) | (~ b_0 & b_1 & s1) | (b_0 & b_2) | (~ b_0 & s1 & b_3) | (s2 & b_2 & s0) | (b_1 & b_3));
  assign d[1] = ((b_0 & b_1 & s1) | (b_0 & s1 & b_3) | (s2 & b_2 & s0) | (b_1 & s1 & b_3));
  assign d[2] = ((b_1 & b_2 & s0) | (s1 & b_3));
  assign d[3] = (b_2 & b_3);
endmodule

module Nollego (
  input [8:0] l,
  output ov
);
  wire s0;
  CompUnsigned #(
    .Bits(9)
  )
  CompUnsigned_i0 (
    .a( l ),
    .b( 9'b10001100 ),
    .\> ( s0 )
  );
  assign ov = ~ s0;
endmodule

module Demux2
#(
    parameter Default = 0 
)
(
    output out_0,
    output out_1,
    output out_2,
    output out_3,
    input [1:0] sel,
    input in
);
    assign out_0 = (sel == 2'h0)? in : Default;
    assign out_1 = (sel == 2'h1)? in : Default;
    assign out_2 = (sel == 2'h2)? in : Default;
    assign out_3 = (sel == 2'h3)? in : Default;
endmodule


module led_h (
  input cen,
  input uni,
  input ll,
  output H
);
  assign H = ((~ cen & ~ ll) | (ll & ~ uni));
endmodule
module DIG_D_FF_Nbit
#(
    parameter Bits = 2,
    parameter Default = 0
)
(
   input [(Bits-1):0] D,
   input C,
   output [(Bits-1):0] Q,
   output [(Bits-1):0] \~Q
);
    reg [(Bits-1):0] state;

    assign Q = state;
    assign \~Q = ~state;

    always @ (posedge C) begin
        state <= D;
    end

    initial begin
        state = Default;
    end
endmodule


module eq (
  input [3:0] bc,
  output eq
);
  wire s0;
  CompUnsigned #(
    .Bits(4)
  )
  CompUnsigned_i0 (
    .a( 4'b0 ),
    .b( bc ),
    .\= ( s0 )
  );
  assign eq = ~ s0;
endmodule

module hide (
  input ci,
  input di,
  output co,
  output do
);
  assign do = (ci | di);
  assign co = ci;
endmodule

module Mux_4x1_NBits #(
    parameter Bits = 2
)
(
    input [1:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    input [(Bits - 1):0] in_2,
    input [(Bits - 1):0] in_3,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module seg7 (
  input [3:0] e,
  output [6:0] s
);
  wire e_0;
  wire e_1;
  wire e_2;
  wire s0;
  wire s1;
  wire s2;
  wire e_3;
  wire s3;
  assign e_0 = e[0];
  assign e_1 = e[1];
  assign e_2 = e[2];
  assign e_3 = e[3];
  assign s2 = ~ e_3;
  assign s1 = ~ e_2;
  assign s0 = ~ e_1;
  assign s3 = ~ e_0;
  assign s[0] = ((e_0 & s0 & s1 & s2) | (s3 & s0 & e_2) | (s3 & e_2 & e_3));
  assign s[1] = ((e_0 & s0 & e_2) | (s3 & e_1 & e_2) | (s3 & e_1 & e_3) | (s3 & e_2 & e_3));
  assign s[2] = ((s3 & e_1 & s1) | (s3 & e_1 & e_3) | (s0 & e_2 & e_3));
  assign s[3] = ((e_0 & s0 & s1) | (s3 & s0 & e_2 & s2) | (e_0 & e_1 & e_2 & s2) | (s3 & e_1 & e_3) | (e_0 & s1 & e_3));
  assign s[4] = ((e_0 & s2) | (e_0 & s0 & s1) | (s3 & e_1 & e_2 & e_3) | (s0 & e_2 & s2));
  assign s[5] = ((e_0 & s1 & s2) | (e_0 & e_1 & s2) | (s3 & e_1 & e_2 & e_3) | (e_1 & s1 & s2));
  assign s[6] = ((e_0 & e_1 & e_2) | (s0 & s1 & s2) | (e_2 & e_3));
endmodule

module top (
  input cl,
  input ec,
  output \Tri ,
  output L_4,
  output L_3,
  output L_2,
  output L_1,
  output A,
  output B,
  output C,
  output D,
  output E,
  output F,
  output G,
  output H,
  output [8:0] d,
  output VCC,
  output GND,
  output L_8,
  output L_7,
  output L_6,
  output L_5,
  output bell,
  output lec
);
  wire [19:0] s0;
  wire [8:0] d_temp;
  wire [3:0] s1;
  wire [3:0] s2;
  wire [3:0] s3;
  wire [3:0] s4;
  wire [3:0] s5;
  wire s6;
  wire [19:0] s7;
  wire [3:0] s8;
  wire s9;
  wire [3:0] s10;
  wire [3:0] s11;
  wire [3:0] s12;
  wire [15:0] s13;
  wire [15:0] s14;
  wire [15:0] s15;
  wire [3:0] s16;
  wire [3:0] s17;
  wire s18;
  wire [1:0] s19;
  wire cen;
  wire s20;
  wire uni;
  wire s21;
  wire [3:0] s22;
  wire [3:0] s23;
  wire [3:0] s24;
  wire [6:0] s25;
  wire ll;
  wire [3:0] s26;
  wire s27;
  wire [3:0] s28;
  wire s29;
  wire s30;
  wire s31;
  wire [3:0] s32;
  \f.alc  \f.alc_i0 (
    .s( s13 )
  );
  assign VCC = 1'b1;
  assign GND = 1'b0;
  assign L_8 = 1'b1;
  assign L_5 = 1'b1;
  assign L_6 = 1'b1;
  assign L_7 = 1'b1;
  assign bell = 1'b0;
  ctr ctr_i1 (
    .ctr( s32 )
  );
  cntr cntr_i2 (
    .c( ec ),
    .cl( cl ),
    .cn( s0 )
  );
  relojC relojC_i3 (
    .cl( cl ),
    .cn( s7 )
  );
  assign s9 = ~ ec;
  divFl divFl_i4 (
    .cl( cl ),
    .dvcl( s18 )
  );
  distancia distancia_i5 (
    .cn( s0 ),
    .l( d_temp ),
    .ld( s1 )
  );
  tpulso tpulso_i6 (
    .l( s7 ),
    .ov( \Tri  )
  );
  cntr4 cntr4_i7 (
    .cld( s18 ),
    .s( s19 )
  );
  \9bitsToBcd  \9bitsToBcd_i8 (
    .l( d_temp ),
    .c( s2 ),
    .d( s3 ),
    .u( s4 )
  );
  fraccion fraccion_i9 (
    .b( s1 ),
    .d( s5 )
  );
  Nollego Nollego_i10 (
    .l( d_temp ),
    .ov( s6 )
  );
  Demux2 #(
    .Default(0)
  )
  Demux2_i11 (
    .sel( s19 ),
    .in( 1'b1 ),
    .out_0( cen ),
    .out_1( s20 ),
    .out_2( uni ),
    .out_3( s21 )
  );
  assign s14[3:0] = s5;
  assign s14[7:4] = s4;
  assign s14[11:8] = s3;
  assign s14[15:12] = s2;
  DIG_D_FF_1bit #(
    .Default(0)
  )
  DIG_D_FF_1bit_i12 (
    .D( s6 ),
    .C( s9 ),
    .Q( ll )
  );
  assign L_4 = ~ cen;
  assign L_3 = ~ s20;
  assign L_2 = ~ uni;
  assign L_1 = ~ s21;
  Mux_2x1_NBits #(
    .Bits(16)
  )
  Mux_2x1_NBits_i13 (
    .sel( s6 ),
    .in_0( s13 ),
    .in_1( s14 ),
    .out( s15 )
  );
  led_h led_h_i14 (
    .cen( cen ),
    .uni( uni ),
    .ll( ll ),
    .H( H )
  );
  assign s11 = s15[3:0];
  assign s8 = s15[7:4];
  assign s16 = s15[11:8];
  assign s17 = s15[15:12];
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i15 (
    .D( s8 ),
    .C( s9 ),
    .Q( s10 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i16 (
    .D( s11 ),
    .C( s9 ),
    .Q( s12 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i17 (
    .D( s17 ),
    .C( s9 ),
    .Q( s28 )
  );
  DIG_D_FF_Nbit #(
    .Bits(4),
    .Default(0)
  )
  DIG_D_FF_Nbit_i18 (
    .D( s16 ),
    .C( s9 ),
    .Q( s26 )
  );
  eq eq_i19 (
    .bc( s26 ),
    .eq( s27 )
  );
  eq eq_i20 (
    .bc( s28 ),
    .eq( s29 )
  );
  hide hide_i21 (
    .ci( s29 ),
    .di( s27 ),
    .co( s30 ),
    .do( s31 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i22 (
    .sel( s30 ),
    .in_0( s32 ),
    .in_1( s28 ),
    .out( s22 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i23 (
    .sel( s31 ),
    .in_0( s32 ),
    .in_1( s26 ),
    .out( s23 )
  );
  Mux_4x1_NBits #(
    .Bits(4)
  )
  Mux_4x1_NBits_i24 (
    .sel( s19 ),
    .in_0( s22 ),
    .in_1( s23 ),
    .in_2( s10 ),
    .in_3( s12 ),
    .out( s24 )
  );
  seg7 seg7_i25 (
    .e( s24 ),
    .s( s25 )
  );
  assign A = s25[0];
  assign B = s25[1];
  assign C = s25[2];
  assign D = s25[3];
  assign E = s25[4];
  assign F = s25[5];
  assign G = s25[6];
  assign d = d_temp;
  assign lec = ec;
endmodule
